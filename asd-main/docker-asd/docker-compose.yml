networks:
  shared:
    driver: bridge
services:
  python:
    build: ./ingestion
    depends_on:
      - mongo
    networks:
      - shared
  pyspark:
    build: ./processing
    depends_on:
      - python
    networks:
      - shared
    entrypoint: /bin/sh -c "while true; do python3 Processing.py; sleep 60; done" # Run every 1 minutes (60 seconds)
  mongo:
    image: mongo
    restart: always
    # environment:
    #   MONGO_INITDB_ROOT_USERNAME: root
    #   MONGO_INITDB_ROOT_PASSWORD: example
    networks:
      - shared
    ports:
      - "27017:27017"
  grafana:
    build: ./grafana
    restart: always
    volumes:
     - ./grafana/data:/var/lib/grafana
     - /var/lib/grafana/plugins
    ports:
     - "3000:3000"
    networks:
      - shared
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    networks:
      - shared
  kafka:
    image: wurstmeister/kafka
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--zookeeper", "zookeeper:2181"]
      interval: 5s
      timeout: 10s
      retries: 5
    ports:
      - "9092:9092"
    networks:
      - shared
    depends_on:
      - zookeeper
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "faker-data:1:1" # topic, partitions, replicas
  producer:
    build: ./kafka_producer
    networks:
      - shared
    depends_on:
      - kafka
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    command: python producer.py
  consumer:
    build: ./kafka_consumer
    networks:
      - shared
    depends_on:
      - kafka
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      MONGO_CONNECTION_STRING: mongodb://mongo:27017/

  #CONSUMER DEPENDS ON PRODUCER ? TESTAR